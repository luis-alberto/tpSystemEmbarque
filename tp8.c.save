#define _REENTRANT
#include <stdio.h>
#include <thread.h>
#include <string.h>
#include <sys/priocntl.h>
#include <sys/rtpriocntl.h>

/* thread prototype */
void *rt_thread(void *);

main()
{

/* create the thread that will run in realtime */
thr_create(NULL, 0, rt_thread, 0, THR_DETACHED, 0);

/* loop here forever, this thread is the TS scheduling class */
while (1) {
	printf("MAIN: In time share class... running\n"); 
	sleep(1);
	}

return(0);
}

/*
	This is the routine that is called by the created thread
*/

void *rt_thread(void *arg)
{
   pcinfo_t pcinfo;
   pcparms_t pcparms;
   int i;

   /* let the main thread run for a bit */
   sleep(4);

   /* get the class ID for the real-time class */
   strcpy(pcinfo.pc_clname, "RT");

   if (priocntl(0, 0, PC_GETCID, (caddr_t)&pcinfo) == -1)
	fprintf(stderr, "getting RT class id\n"), exit(1);

   /* set up the real-time parameters */
   pcparms.pc_cid = pcinfo.pc_cid;
   ((rtparms_t *)pcparms.pc_clparms)->rt_pri = 10;
   ((rtparms_t *)pcparms.pc_clparms)->rt_tqnsecs = 0;

   /* set an infinite time quantum */
   ((rtparms_t *)pcparms.pc_clparms)->rt_tqsecs = RT_TQINF; 

   /* move this thread to the real-time scheduling class */
   if (priocntl(P_LWPID, P_MYID, PC_SETPARMS, (caddr_t)&pcparms) == -1)
	fprintf(stderr, "Setting RT mode\n"), exit(1);

   /* simulate some processing */
   for (i=0;i<100000000;i++);

   printf("RT_THREAD: NOW EXITING...\n");
   thr_exit((void *)0);
}

